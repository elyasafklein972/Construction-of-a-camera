Index: src/unittests/LightTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unittests;\r\n\r\nimport org.junit.Test;\r\n\r\nimport elements.*;\r\nimport geometries.*;\r\nimport primitives.*;\r\nimport renderer.*;\r\nimport scene.Scene;\r\n\r\n/**\r\n * Test rendering abasic image\r\n *\r\n * @author Dan\r\n */\r\npublic class LightTest {\r\n\r\n    /**\r\n     * Produce a picture of a sphere lighted by a directional light\r\n     */\r\n    @Test\r\n    public void sphereDirectional() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(Color.BLACK, 0d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 100), 50, new Point3D(0, 0, 50)));\r\n\r\n        scene.addLights(new DirectionalLight(new Color(500, 300, 0), new Vector(1, -1, 1)));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"sphereDirectional\", 150, 150, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a sphere lighted by a point light\r\n     */\r\n    @Test\r\n    public void spherePoint() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(Color.BLACK, 0d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n\r\n        scene.addGeometries(\r\n                new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 100), 50, new Point3D(0, 0, 50)));\r\n\r\n        scene.addLights(new PointLight(new Color(500, 300, 0), new Point3D(-50, 50, -50), 1, 0.00001, 0.000001));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"spherePoint\", 150, 150, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a sphere lighted by a spot light\r\n     */\r\n    @Test\r\n    public void sphereSpot() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(Color.BLACK, 0d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n\r\n        scene.addGeometries(\r\n                new Sphere(new Color(java.awt.Color.BLUE), new Material(0.5, 0.5, 100), 50, new Point3D(0, 0, 50)));\r\n\r\n        scene.addLights(new SpotLight(new Color(500, 300, 0), new Point3D(-50, 50, -50),\r\n                new Vector(1, -1, 2), 1, 0.00001, 0.00000001));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"sphereSpot\", 150, 150, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a two triangles lighted by a directional light\r\n     */\r\n    @Test\r\n    public void trianglesDirectional() {\r\n        Scene scene = new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(Color.WHITE, 0.15))\r\n                .addBackground(Color.BLACK)\r\n                .addCamera(new Camera(\r\n                        new Point3D(0, 0, -1000),\r\n                        new Vector(0, 0, 1),\r\n                        new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .build();\r\n\r\n\r\n        scene.addGeometries(\r\n                new Triangle(\r\n                        Color.BLACK,\r\n                        new Material(0.8, 0.2, 300),\r\n                        new Point3D(-150, 150, 150),\r\n                        new Point3D(150, 150, 150),\r\n                        new Point3D(75, -75, 150)),\r\n                new Triangle(\r\n                        Color.BLACK,\r\n                        new Material(0.8, 0.2, 300),\r\n                        new Point3D(-150, 150, 150),\r\n                        new Point3D(-70, -70, 50),\r\n                        new Point3D(75, -75, 150)));\r\n\r\n        scene.addLights(new DirectionalLight(\r\n                new Color(300, 150, 150),\r\n                new Vector(0, 0, 1)));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"trianglesDirectional\", 200, 200, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a two triangles lighted by a point light\r\n     */\r\n    @Test\r\n    public void trianglesPoint() {\r\n        Scene scene = new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(Color.WHITE, 0.15))\r\n                .addBackground(Color.BLACK)\r\n                .addCamera(new Camera(\r\n                        new Point3D(0, 0, -1000),\r\n                        new Vector(0, 0, 1),\r\n                        new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Triangle(\r\n                        Color.BLACK,\r\n                        new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150),\r\n                        new Point3D(150, 150, 150),\r\n                        new Point3D(75, -75, 150)),\r\n                new Triangle(\r\n                        Color.BLACK,\r\n                        new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150),\r\n                        new Point3D(-70, -70, 50),\r\n                        new Point3D(75, -75, 150)));\r\n\r\n        scene.addLights(new PointLight(\r\n                new Color(500, 250, 250),\r\n                new Point3D(10, 10, 130),\r\n                1, 0.0005, 0.0005));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"trianglesPoint\", 200, 200, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n    /**\r\n     * Produce a picture of a two triangles lighted by a spot light\r\n     */\r\n    @Test\r\n    public void trianglesSpot() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n\r\n        scene.addGeometries(\r\n                new Triangle(Color.BLACK, new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(150, 150, 150), new Point3D(75, -75, 150)),\r\n                new Triangle(Color.BLACK, new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(-70, -70, 50), new Point3D(75, -75, 150)));\r\n\r\n        scene.addLights(new SpotLight(new Color(500, 250, 250),\r\n                new Point3D(10, 10, 130), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"trianglesSpot\", 200, 200, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n\r\n   /************our test***********/\r\n\r\n\r\n\r\n    /**\r\n     * Produce a picture of a sphere lighted by a directional light\r\n     */\r\n    @Test\r\n    public void sphereTest() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.orange), 0.3d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(new Color(0,0,0))\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Sphere(new Color(java.awt.Color.DARK_GRAY), new Material(0.5, 0.5, 100), 50, new Point3D(0, 0, 50)));\r\n\r\n        scene.addLights(new DirectionalLight(new Color(200, 300, 0), new Vector(0, 0, 1)));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"sphereTest\", 150, 150, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a two triangles lighted by a point light\r\n     */\r\n    @Test\r\n    public void trianglesPoint2() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.cyan), 0.2d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(800)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Triangle(new Color(0,200,200), new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(150, 150, 150), new Point3D(75, -75, 150)),\r\n                new Triangle(Color.BLACK, new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(-70, -70, 50), new Point3D(75, -75, 150)));\r\n\r\n        scene.addLights(new PointLight(new Color(0, 255, 0),\r\n                new Point3D(12, -17, 130),\r\n                2, 0.001, 0.001));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"triangTest\", 200, 200, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n    /**\r\n     * Produce a picture of a two triangles lighted by a point light\r\n     */\r\n    @Test\r\n    public void trianglesPointSpot3() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.cyan), 0.2d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(800)\r\n                .addBackground(Color.BLACK)\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Triangle(new Color(0,200,200), new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(150, 150, 150), new Point3D(75, -75, 150)),\r\n                new Triangle(Color.BLACK, new Material(0.5, 0.5, 300),\r\n                        new Point3D(-150, 150, 150), new Point3D(-70, -70, 50), new Point3D(75, -75, 150)));\r\n\r\n        scene.addLights(new PointLight(new Color(0, 255, 0),\r\n                new Point3D(12, -17, 130),\r\n                2, 0.001, 0.001));\r\n        scene.addLights(new SpotLight(new Color(0, 255, 0),\r\n                new Point3D(10, 10, 130), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n               scene.addLights(new SpotLight(new Color(500, 250, 250),\r\n                new Point3D(10, 10, 10), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n        scene.addLights(new SpotLight(new Color(500, 250, 250),\r\n                new Point3D(10, 10, -100), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"triangTestSpotPoint\", 200, 200, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n\r\n    /**\r\n     * Produce a picture of a sphere lighted by a directional light\r\n     */\r\n    @Test\r\n    public void sphereTestDirectionSpotPoint() {\r\n\r\n        Scene  scene= new Scene.SceneBuilder(\"Test scene\")\r\n                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.blue), 0.3d))\r\n                .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))\r\n                .addDistance(1000)\r\n                .addBackground(new Color(0,0,0))\r\n                .build();\r\n\r\n        scene.addGeometries(\r\n                new Sphere(new Color(java.awt.Color.DARK_GRAY), new Material(0.5, 0.5, 100), 50, new Point3D(0, 0, 50)));\r\n\r\n       // scene.addLights(new DirectionalLight(new Color(200, 300, 0), new Vector(0, 0, 1)));\r\n        scene.addLights(new PointLight(new Color(0, 255, 0),\r\n                new Point3D(12, -17, 130),\r\n                2, 0.001, 0.001));\r\n        scene.addLights(new SpotLight(new Color(0, 255, 0),\r\n                new Point3D(10, 10, 130), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n        scene.addLights(new SpotLight(new Color(500, 250, 250),\r\n                new Point3D(10, 10, 10), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n        scene.addLights(new SpotLight(new Color(500, 250, 250),\r\n                new Point3D(10, 10, -100), new Vector(-2, 2, 1),\r\n                1, 0.0001, 0.000005));\r\n\r\n        ImageWriter imageWriter = new ImageWriter(\"sphereTestSpotPoint\", 150, 150, 500, 500);\r\n        Render render = new Render(imageWriter, scene);\r\n\r\n        render.renderImage();\r\n        render.writeToImage();\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/unittests/LightTest.java	(revision a5fe7d30999981aac6e99b4d20681ce1f7cdc920)
+++ src/unittests/LightTest.java	(date 1590058183062)
@@ -179,9 +179,8 @@
      */
     @Test
     public void trianglesSpot() {
-
-        Scene  scene= new Scene.SceneBuilder("Test scene")
-                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15d))
+        Scene scene= new Scene.SceneBuilder("Test scene")
+                .addAmbientLight(new AmbientLight(new Color(java.awt.Color.WHITE), 0.15))
                 .addCamera(new Camera(new Point3D(0, 0, -1000), new Vector(0, 0, 1), new Vector(0, -1, 0)))
                 .addDistance(1000)
                 .addBackground(Color.BLACK)
@@ -206,7 +205,8 @@
     }
 
 
-   /************our test***********/
+
+    /************our test***********/
 
 
 
Index: src/scene/Scene.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package scene;\r\n\r\nimport elements.*;\r\nimport geometries.Geometries;\r\nimport geometries.Intersectable;\r\nimport primitives.Color;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\npublic class Scene {\r\n    private final String _name;\r\n    private final Geometries _geometries = new Geometries();\r\n\r\n    private Color _background;\r\n    private Camera _camera;\r\n    private double _distance;\r\n    private AmbientLight _ambientLight;\r\n    private List<LightSource> _lights = null;\r\n\r\n\r\n    public AmbientLight getAmbientLight() {\r\n        return _ambientLight;\r\n    }\r\n\r\n    public Camera getCamera() {\r\n        return _camera;\r\n    }\r\n\r\n    public Geometries getGeometries() {\r\n        return _geometries;\r\n    }\r\n\r\n    public double getDistance() {\r\n        return _distance;\r\n    }\r\n\r\n    public Scene(String _sceneName) {\r\n        this._name = _sceneName;\r\n    }\r\n\r\n    public Color getBackground() {\r\n        return this._background;\r\n    }\r\n\r\n\r\n    public List<LightSource> getLightSources() {\r\n        return _lights;\r\n    }\r\n\r\n    public void addGeometries(Intersectable... intersectables) {\r\n        for (Intersectable i : intersectables) {\r\n            _geometries.add(i);\r\n        }\r\n    }\r\n\r\n    public void removeGeometries(Intersectable... intersectables) {\r\n        for (Intersectable i : intersectables) {\r\n            _geometries.remove(i);\r\n        }\r\n    }\r\n\r\n    public void addLights(LightSource light) {\r\n        if (_lights == null) {\r\n            _lights = new ArrayList<>();\r\n        }\r\n        _lights.add(light);\r\n    }\r\n\r\n    public void setBackground(Color _background) {\r\n        this._background = _background;\r\n    }\r\n\r\n    public void setCamera(Camera _camera) {\r\n        this._camera = _camera;\r\n    }\r\n\r\n    public void setDistance(double _distance) {\r\n        this._distance = _distance;\r\n    }\r\n\r\n    public void setAmbientLight(AmbientLight _ambientLight) {\r\n        this._ambientLight = _ambientLight;\r\n    }\r\n\r\n    public void setLights(List<LightSource> _lights) {\r\n        this._lights = _lights;\r\n    }\r\n\r\n    public static class SceneBuilder {\r\n        private String name;\r\n        private Color background;\r\n        private Camera camera;\r\n        private double distance;\r\n        private AmbientLight ambientLight;\r\n\r\n        public SceneBuilder(String name) {\r\n            this.name = name;\r\n        }\r\n\r\n        public SceneBuilder addBackground(Color background) {\r\n            this.background = background;\r\n            return this;\r\n        }\r\n\r\n        public SceneBuilder addCamera(Camera camera) {\r\n            this.camera = camera;\r\n            return this;\r\n        }\r\n\r\n        public SceneBuilder addDistance(double distance) {\r\n            this.distance = distance;\r\n            return this;\r\n        }\r\n\r\n        public SceneBuilder addAmbientLight(AmbientLight ambientLight) {\r\n            this.ambientLight = ambientLight;\r\n            return this;\r\n        }\r\n\r\n        public Scene build() {\r\n            Scene scene = new Scene(this.name);\r\n            scene._camera = this.camera;\r\n            scene._distance = this.distance;\r\n            scene._background = this.background;\r\n            scene._ambientLight = this.ambientLight;\r\n            validateUserObject(scene);\r\n            return scene;\r\n        }\r\n\r\n        private void validateUserObject(Scene scene) {\r\n            //Do some basic validations to check\r\n            //if user object does not break any assumption of system\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/scene/Scene.java	(revision a5fe7d30999981aac6e99b4d20681ce1f7cdc920)
+++ src/scene/Scene.java	(date 1590058183076)
@@ -5,7 +5,6 @@
 import geometries.Intersectable;
 import primitives.Color;
 
-import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -63,31 +62,11 @@
 
     public void addLights(LightSource light) {
         if (_lights == null) {
-            _lights = new ArrayList<>();
+            _lights = new LinkedList<>();
         }
         _lights.add(light);
     }
 
-    public void setBackground(Color _background) {
-        this._background = _background;
-    }
-
-    public void setCamera(Camera _camera) {
-        this._camera = _camera;
-    }
-
-    public void setDistance(double _distance) {
-        this._distance = _distance;
-    }
-
-    public void setAmbientLight(AmbientLight _ambientLight) {
-        this._ambientLight = _ambientLight;
-    }
-
-    public void setLights(List<LightSource> _lights) {
-        this._lights = _lights;
-    }
-
     public static class SceneBuilder {
         private String name;
         private Color background;
Index: src/primitives/Vector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package primitives;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class Vector {\r\n    private  Point3D _head;\r\n\r\n    public  final static Vector ZERO = new Vector(new Point3D(new Coordinate(0.0),new Coordinate(0.0),new Coordinate(0.0)));\r\n\r\n    /*\r\n            * Constractor\r\n     * • Builders receiving:\r\n            * a) three coordinates,\r\n     * b) three double-digit numbers,\r\n     * c) a point,\r\n     * d) a vector\r\n     * @param _head\r\n     */\r\n    public Vector(Point3D _head) {\r\n        Point3D Zero=new Point3D(new Coordinate(0.0),new Coordinate(0.0),new Coordinate(0.0));\r\n\r\n        if (_head != Zero)\r\n            this._head = _head;\r\n\r\n        else throw new IllegalArgumentException (  \"head cannot be the zero vector\");\r\n\r\n\r\n    }\r\n    public  Vector(Point3D p1,Point3D p2){\r\n        this._head=p1.subtract(p2)._head;\r\n    }\r\n    public Vector (Coordinate _x,Coordinate _y,Coordinate _z){\r\n        Point3D _head =new Point3D(new Coordinate(_x),new Coordinate(_y),new Coordinate(_z));\r\n        //  Point3D Zero=new Point3D(new Coordinate(0.0),new Coordinate(0.0),new Coordinate(0.0));\r\n\r\n        if (_head.get_x().get() == 0.0 &&_head.get_y().get() == 0.0 &&_head.get_x().get() == 0.0)\r\n            throw new IllegalArgumentException (  \"head cannot be the zero vector\");\r\n\r\n        else\r\n            this._head = _head;\r\n\r\n    }\r\n\r\n    public Vector(double _x,double _y,double _z){\r\n\r\n        if (_x == 0.0 &&_y == 0.0 &&_z == 0.0)\r\n            throw new IllegalArgumentException (  \"head cannot be the zero vector\");\r\n        this._head=new Point3D(_x,_y,_z);\r\n//    else throw new IllegalArgumentException (  \"head cannot be the zero vector\");\r\n\r\n    }\r\n    public Vector(Vector _head)\r\n    {\r\n        Vector v2=new Vector(_head.get_head().get_x().get(),_head.get_head().get_y().get(),_head.get_head().get_z().get());\r\n        this._head=v2._head;\r\n    }\r\n    public Vector subtract(Vector vec){\r\n        return new Vector(\r\n                this._head.get_x().get()-vec._head.get_x().get(),\r\n                this._head.get_y().get()-vec._head.get_y().get(),\r\n                this._head.get_z().get()-vec._head.get_z().get());\r\n    }\r\n\r\n    public Vector add(Vector vec){\r\n        return new Vector(\r\n                this._head.get_x().get()+vec._head.get_x().get(),\r\n                this._head.get_y().get()+vec._head.get_y().get(),\r\n                this._head.get_z().get()+vec._head.get_z().get());\r\n    }\r\n\r\n    public Vector scale(double num){\r\n        return new Vector(\r\n                this._head.get_x().get()*num,\r\n                this._head.get_y().get()*num,\r\n                this._head.get_z().get()*num);\r\n    }\r\n\r\n    public double dotProduct(Vector other) {\r\n\r\n\r\n        return (\r\n                _head.get_x().get()*other._head.get_x().get()+\r\n                        _head.get_y().get()*other._head.get_y().get()+\r\n                        _head.get_z().get()*other._head.get_z().get());\r\n\r\n\r\n    }\r\n    public Vector crossProduct(Vector other){\r\n        double equalx =(this._head.get_x().get()/other._head.get_x().get());\r\n        double equaly =(this._head.get_y().get()/other._head.get_y().get());\r\n        double equalz =(this._head.get_z().get()/other._head.get_z().get());\r\n\r\n        if(equalx == equaly && equalz == equaly)\r\n            throw new IllegalArgumentException(\"Two vectors are parallel or same\");\r\n\r\n        else\r\n            return new Vector(new Point3D(  new Coordinate(this._head.get_y().get()*other._head.get_z().get()-this._head.get_z().get()*other._head.get_y().get()),\r\n                    new Coordinate(this._head.get_z().get()*other._head.get_x().get()-this._head.get_x().get()*other._head.get_z().get()),\r\n                    new Coordinate(this._head.get_x().get()*other._head.get_y().get()-this._head.get_y().get()*other._head.get_x().get())));\r\n\r\n\r\n    }\r\n    public double lengthSquared()\r\n    {\r\n        return (this._head.get_x().get()*this._head.get_x().get()+\r\n                this._head.get_y().get()*this._head.get_y().get()+\r\n                this._head.get_z().get()*this._head.get_z().get());\r\n    }\r\n\r\n    public double length()\r\n    {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n\r\n    /*\r\n            * get Fun return _head\r\n     * @return\r\n             */\r\n    public Point3D get_head() {\r\n        return _head;\r\n    }\r\n\r\n            /*\r\n            * set Fun set Point to _head\r\n     * @param _head\r\n     */\r\n    public void set_head(Point3D _head) {\r\n        this._head = _head;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n            * override equal fun\r\n     * @param o\r\n     * @return\r\n             */\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Vector vector = (Vector) o;\r\n        return Objects.equals(_head, vector._head);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(_head);\r\n    }\r\n    /*\r\n            * @return the same Vector after normalisation\r\n     * @throws ArithmeticException if length = 0\r\n            */\r\n    public Vector normalize() {\r\n\r\n        double x = this._head.get_x()._coord;\r\n        double y = this._head.get_y()._coord;\r\n        double z = this._head.get_z()._coord;\r\n\r\n        double length = this.length();\r\n\r\n        if (length == 0)\r\n            throw new ArithmeticException(\"divide by Zero\");\r\n\r\n        this._head.set_x(new Coordinate(x / length));\r\n        this._head.set_y(new Coordinate(y / length));\r\n        this._head.set_z(new Coordinate(z / length));\r\n\r\n        return this;\r\n    }\r\n\r\n    public Vector normalized() {\r\n        Vector vector = new Vector(this);\r\n        vector.normalize();\r\n        return vector;\r\n    }\r\n\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Vector{\" +\r\n                \"_head=\" + _head +\r\n                '}';\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/primitives/Vector.java	(revision a5fe7d30999981aac6e99b4d20681ce1f7cdc920)
+++ src/primitives/Vector.java	(date 1590058183087)
@@ -162,9 +162,9 @@
         if (length == 0)
             throw new ArithmeticException("divide by Zero");
 
-        this._head.set_x(new Coordinate(x / length));
-        this._head.set_y(new Coordinate(y / length));
-        this._head.set_z(new Coordinate(z / length));
+        this._head.set_x( new Coordinate(x / length));
+        this._head.set_y( new Coordinate(y / length));
+        this._head.set_z( new Coordinate(z / length));
 
         return this;
     }
